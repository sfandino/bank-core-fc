/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/9.0.0/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    alias(libs.plugins.kotlin.jvm)
    //kotlin("jvm") version "1.9.10"
    application
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    // Kotlin Standard Library
    //implementation(kotlin("stdlib", "1.9.10"))
    implementation(kotlin("stdlib"))

    // PostgreSQL JDBC Driver
    implementation("org.postgresql:postgresql:42.7.2")

    // Flyway for DB migrations
    implementation("org.flywaydb:flyway-core:11.10.5")
    implementation("org.flywaydb:flyway-database-postgresql:11.10.5")

    // HikariCP for connection pooling
    implementation("com.zaxxer:HikariCP:5.0.1")

    // CSV handling
    implementation("org.apache.commons:commons-csv:1.9.0")

    // Kafka client
    implementation("org.apache.kafka:kafka-clients:3.6.1")

    // Jackson for JSON
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.15.2")

    // logging
    implementation("io.github.microutils:kotlin-logging-jvm:3.0.5")
    implementation("ch.qos.logback:logback-classic:1.4.11")

    // Guava -- TODO CF delete if not needed after compiling
    implementation(libs.guava)

    // Testing
    testImplementation("org.junit.jupiter:junit-jupiter:5.10.2")
}

// This would be implemented to improve the code quality and reliability of the project
testing {
    suites {
        val test by getting(JvmTestSuite::class) {
            useJUnitJupiter("5.10.2")
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    mainClass = "com.bankcore.payments.AppKt" // commented out to avoid errors building
    //mainClass.set("com.bankcore.payments.FlywayMigrateKt")
}

tasks.register<JavaExec>("flywayMigrateManual") {
    group = "flyway"
    description = "Run Flyway migration manually from Kotlin main class"

    classpath = sourceSets["main"].runtimeClasspath
    mainClass.set("com.bankcore.payments.FlywayMigrateKt")
}

tasks.register<JavaExec>("importCsv") {
  group = "ingestion"
  description = "Import CSV via JDBC"
  classpath = sourceSets["main"].runtimeClasspath
  mainClass.set("com.bankcore.payments.JdbcCSVImporter")
  args = listOf("src/main/resources/data/transactions.csv")
}

tasks.register<JavaExec>("runKafkaConsumer") {
  group = "ingestion"
  description = "Start the Kafka JSON consumer"
  classpath = sourceSets["main"].runtimeClasspath
  mainClass.set("com.bankcore.payments.KafkaConsumerAppKt")
}